/** Declaration file generated by dts-gen */

export class Dashboard {
    constructor(t: any);

    destroy(t: any): any;

    hide(): any;

    initialize(): any;

    position(): any;

    shouldPersist(): any;

    show(): any;

    update(): any;

}

export class DataLayer {
    constructor(t: any, e: any);

    addField(t: any, e: any, a: any): any;

    applyAllElementStatus(): void;

    applyBehaviors(a: any): void;

    applyCustomDataMethods(): any;

    applyDataMethods(): any;

    createTooltip(t: any): any;

    destroyAllTooltips(): any;

    destroyTooltip(t: any, e: any): any;

    draw(): any;

    executeBehaviors(t: any, e: any): any;

    exportData(t: any): any;

    fadeAllElements(): any;

    fadeElement(t: any, e: any): any;

    fadeElementsByFilters(t: any, e: any): any;

    filter(e: any, a: any): any;

    filterElements(t: any): any;

    filterIndexes(t: any): any;

    getAbsoluteDataHeight(): any;

    getAxisExtent(t: any): any;

    getBaseId(): any;

    getElementAnnotation(t: any, e: any): any;

    getElementById(t: any): any;

    getElementId(t: any): any;

    getElementStatusNodeId(t: any): any;

    getPageOrigin(): any;

    getTicks(t: any, e: any): any;

    hideAllElements(): any;

    hideElement(t: any, e: any): any;

    hideElementsByFilters(t: any, e: any): any;

    highlightAllElements(): any;

    highlightElement(t: any, e: any): any;

    highlightElementsByFilters(t: any, e: any): any;

    initialize(): any;

    moveDown(): any;

    moveUp(): any;

    positionAllTooltips(): any;

    positionTooltip(t: any): any;

    reMap(): any;

    resolveScalableParameter(t: any, e: any, a: any): any;

    selectAllElements(): any;

    selectElement(t: any, e: any): any;

    selectElementsByFilters(t: any, e: any): any;

    setAllElementStatus(a: any, t: any): any;

    setElementAnnotation(t: any, e: any, a: any): any;

    setElementStatus(t: any, e: any, a: any, i: any): any;

    setElementStatusByFilters(e: any, a: any, t: any, i: any): any;

    showOrHideTooltip(t: any, e: any): any;

    unfadeAllElements(): any;

    unfadeElement(t: any, e: any): any;

    unfadeElementsByFilters(t: any, e: any): any;

    unhideAllElements(): any;

    unhideElement(t: any, e: any): any;

    unhideElementsByFilters(t: any, e: any): any;

    unhighlightAllElements(): any;

    unhighlightElement(t: any, e: any): any;

    unhighlightElementsByFilters(t: any, e: any): any;

    unselectAllElements(): any;

    unselectElement(t: any, e: any): any;

    unselectElementsByFilters(t: any, e: any): any;

    updateTooltip(t: any, e: any): any;

    static DefaultLayout: {
        fields: any[];
        tooltip_positioning: string;
        type: string;
        x_axis: {
        };
        y_axis: {
        };
    };

    static Statuses: {
        adjectives: string[];
        menu_antiverbs: string[];
        verbs: string[];
    };

}

export class DataSources {
    constructor();

    add(t: any, e: any): any;

    addSource(t: any, e: any): any;

    fromJSON(e: any): any;

    get(t: any): any;

    getSource(t: any): any;

    keys(): any;

    remove(t: any): any;

    removeSource(t: any): any;

    set(t: any, e: any): any;

    toJSON(): any;

}

export class Legend {
    constructor(t: any);

    hide(): void;

    position(): any;

    render(): any;

    show(): void;

    static DefaultLayout: {
        height: number;
        hidden: boolean;
        label_size: number;
        orientation: string;
        origin: {
            x: number;
            y: number;
        };
        padding: number;
        width: number;
    };

}

export class Panel {
    constructor(t: any, e: any, ...args: any[]);

    addBasicLoader(t: any): any;

    addDataLayer(t: any): any;

    clearSelections(): any;

    fadeAllElements(): any;

    fadeElementsByFilters(t: any, e: any): any;

    generateExtents(): any;

    generateTicks(i: any): any;

    getLinkedPanelIds(e: any): any;

    hideAllElements(): any;

    hideElementsByFilters(t: any, e: any): any;

    highlightAllElements(): any;

    highlightElementsByFilters(t: any, e: any): any;

    initialize(): any;

    initializeLayout(): any;

    moveDown(): any;

    moveUp(): any;

    reMap(): any;

    removeDataLayer(t: any): any;

    render(): any;

    renderAxis(i: any): any;

    resortDataLayers(): void;

    scaleHeightToData(a: any): void;

    selectAllElements(): any;

    selectElementsByFilters(t: any, e: any): any;

    setAllElementStatus(e: any, a: any): void;

    setDimensions(t: any, e: any): any;

    setElementStatusByFilters(e: any, a: any, i: any, s: any): void;

    setMargin(t: any, e: any, a: any, i: any): any;

    setOrigin(t: any, e: any): any;

    setTitle(t: any): any;

    unfadeAllElements(): any;

    unfadeElementsByFilters(t: any, e: any): any;

    unhideAllElements(): any;

    unhideElementsByFilters(t: any, e: any): any;

    unhighlightAllElements(): any;

    unhighlightElementsByFilters(t: any, e: any): any;

    unselectAllElements(): any;

    unselectElementsByFilters(t: any, e: any): any;

    static DefaultLayout: {
        axes: {
            x: {
            };
            y1: {
            };
            y2: {
            };
        };
        background_click: string;
        cliparea: {
            height: number;
            origin: {
                x: number;
                y: number;
            };
            width: number;
        };
        dashboard: {
            components: any[];
        };
        data_layers: any[];
        height: number;
        interaction: {
            drag_background_to_pan: boolean;
            drag_x_ticks_to_scale: boolean;
            drag_y1_ticks_to_scale: boolean;
            drag_y2_ticks_to_scale: boolean;
            scroll_to_zoom: boolean;
            x_linked: boolean;
            y1_linked: boolean;
            y2_linked: boolean;
        };
        legend: any;
        margin: {
            bottom: number;
            left: number;
            right: number;
            top: number;
        };
        min_height: number;
        min_width: number;
        origin: {
            x: number;
            y: any;
        };
        proportional_height: any;
        proportional_origin: {
            x: number;
            y: any;
        };
        proportional_width: any;
        title: {
            style: {
            };
            text: string;
            x: number;
            y: number;
        };
        width: number;
        y_index: any;
    };

}

export class Plot {
    constructor(t: any, e: any, a: any);

    addPanel(t: any): any;

    applyState(t: any): any;

    clearPanelData(t: any, i: any): any;

    initialize(): any;

    initializeLayout(): any;

    positionPanels(): any;

    refresh(): any;

    removePanel(t: any): any;

    rescaleSVG(): any;

    setDimensions(t: any, e: any): any;

    startDrag(t: any, e: any): any;

    stopDrag(): any;

    subscribeToData(t: any, e: any, a: any): any;

    sumProportional(t: any): any;

    static DefaultLayout: {
        aspect_ratio: number;
        dashboard: {
            components: any[];
        };
        height: number;
        min_height: number;
        min_width: number;
        mouse_guide: boolean;
        panel_boundaries: boolean;
        panels: any[];
        responsive_resize: boolean;
        state: {
        };
        width: number;
    };

}

export const StandardLayout: {
    dashboard: {
        components: {
            position: string;
            subtitle: string;
            title: string;
            type: string;
        }[];
    };
    height: number;
    max_region_scale: number;
    min_region_scale: number;
    panels: {
        axes: {
            x: {
                extent: string;
                label: string;
                label_offset: number;
                tick_format: string;
            };
            y1: {
                label: string;
                label_offset: number;
            };
            y2: {
                label: string;
                label_offset: number;
            };
        };
        dashboard: {
            components: {
                color: string;
                group_position: string;
                position: string;
                type: string;
            }[];
        };
        data_layers: {
            id: string;
            offset: number;
            orientation: string;
            type: string;
        }[];
        height: number;
        id: string;
        inner_border: string;
        interaction: {
            drag_background_to_pan: boolean;
            drag_x_ticks_to_scale: boolean;
            drag_y1_ticks_to_scale: boolean;
            drag_y2_ticks_to_scale: boolean;
            scroll_to_zoom: boolean;
            x_linked: boolean;
        };
        legend: {
            hidden: boolean;
            orientation: string;
            origin: {
                x: number;
                y: number;
            };
        };
        margin: {
            bottom: number;
            left: number;
            right: number;
            top: number;
        };
        min_height: number;
        min_width: number;
        proportional_height: number;
        proportional_width: number;
        width: number;
    }[];
    responsive_resize: string;
    state: {
    };
    width: number;
};

export const ext: {
};

export const version: string;

export function createCORSPromise(s: any, n: any, o: any, r: any, l: any): any;

export function generateCurtain(): any;

export function generateLoader(): any;

export function getToolTipData(t: any): any;

export function getToolTipDataLayer(t: any): any;

export function getToolTipPanel(t: any): any;

export function getToolTipPlot(t: any): any;

export function parseFields(e: any, t: any): any;

export function parsePositionQuery(t: any): any;

export function populate(t: any, a: any, i: any): any;

export function populateAll(t: any, a: any, i: any): any;

export function positionIntToString(t: any, e: any, a: any): any;

export function positionStringToInt(t: any): any;

export function prettyTicks(t: any, e: any, a: any): any;

export function subclass(t: any, e: any, ...args: any[]): any;

export namespace Dashboard {
    class Component {
        constructor(t: any, e: any);

        destroy(t: any): any;

        hide(): any;

        position(): any;

        shouldPersist(): any;

        show(): any;

        update(): void;

        static Button(t: any): any;

    }

    namespace Components {
        function add(t: any, e: any): void;

        function get(t: any, e: any, a: any): any;

        function list(): any;

        function set(t: any, e: any): void;

    }

}

export namespace Data {
    class AssociationSource {
        constructor(t: any);

        getURL(t: any, e: any, a: any): any;

        normalizeResponse(t: any): any;

        preGetData(t: any, e: any, a: any, i: any): any;

        static SOURCE_NAME: string;

    }

    class ConnectorSource {
        constructor(t: any);

        combineChainBody(t: any, e: any): void;

        getRequest(t: any, a: any, e: any): any;

        parseInit(t: any): void;

        parseResponse(t: any, e: any, a: any, i: any, s: any): any;

        static SOURCE_NAME: string;

    }

    class GeneConstraintSource {
        constructor(t: any);

        combineChainBody(e: any, t: any, a: any, i: any, s: any): any;

        fetchRequest(t: any, e: any, a: any): any;

        getCacheKey(t: any, e: any, a: any): any;

        getURL(): any;

        normalizeResponse(t: any): any;

        static SOURCE_NAME: string;

    }

    class GeneSource {
        constructor(t: any);

        extractFields(t: any, e: any, a: any, i: any): any;

        getURL(t: any, e: any, a: any): any;

        normalizeResponse(t: any): any;

        static SOURCE_NAME: string;

    }

    class GwasCatalog {
        constructor(t: any);

        combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

        extractFields(t: any, e: any, a: any, i: any): any;

        findMergeFields(t: any): any;

        getURL(t: any, e: any, a: any): any;

        static SOURCE_NAME: string;

    }

    class LDSource {
        constructor(t: any);

        combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

        findMergeFields(t: any, ...args: any[]): any;

        findRequestedFields(t: any, e: any): any;

        getRefvar(t: any, e: any, a: any): any;

        getURL(t: any, e: any, a: any): any;

        normalizeResponse(t: any): any;

        preGetData(t: any, e: any): void;

        static SOURCE_NAME: string;

    }

    class LDSource2 {
        constructor(...args: any[]);

        fetchRequest(t: any, e: any, a: any): any;

        getURL(t: any, e: any, a: any): any;

        static SOURCE_NAME: string;

    }

    class PheWASSource {
        constructor(t: any);

        getURL(t: any, e: any, a: any): any;

        static SOURCE_NAME: string;

    }

    class RecombinationRateSource {
        constructor(t: any);

        getURL(t: any, e: any, a: any): any;

        static SOURCE_NAME: string;

    }

    class Source {
        constructor();

        annotateData(t: any, e: any): any;

        combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

        extractFields(t: any, s: any, n: any, o: any): any;

        fetchRequest(t: any, e: any, a: any): any;

        getCacheKey(t: any, e: any, a: any): any;

        getData(t: any, a: any, i: any, s: any): any;

        getRequest(t: any, e: any, a: any): any;

        getURL(t: any, e: any, a: any): any;

        normalizeResponse(e: any): any;

        parseArraysToObjects(t: any, e: any, a: any, i: any): any;

        parseData(t: any, e: any, a: any, i: any): any;

        parseInit(t: any): void;

        parseObjectsToObjects(t: any, e: any, a: any, i: any): any;

        parseResponse(t: any, e: any, a: any, i: any, s: any): any;

        prepareData(t: any): any;

        toJSON(): any;

        static extend(t: any, e: any, a: any): any;

    }

    class StaticSource {
        constructor(t: any);

        getRequest(t: any, e: any, a: any): any;

        toJSON(): any;

        static SOURCE_NAME: string;

    }

    function Field(t: any): any;

    function Requester(l: any): any;

}

export namespace DataLayers {
    function add(t: any, e: any): void;

    function extend(t: any, e: any, a: any): any;

    function get(t: any, e: any, a: any): any;

    function list(): any;

    function set(t: any, e: any): void;

}

export namespace KnownDataSources {
    function add(t: any): void;

    function clear(): void;

    function create(t: any, ...args: any[]): any;

    function extend(t: any, e: any, a: any): any;

    function get(t: any): any;

    function getAll(): any;

    function list(): any;

    function push(t: any): void;

    function setAll(t: any): void;

}

export namespace Layouts {
    function add(t: any, e: any, a: any): any;

    function get(t: any, e: any, a: any): any;

    function list(t: any): any;

    function merge(t: any, e: any): any;

    function set(t: any, e: any, a: any): any;

}

export namespace ScaleFunctions {
    function add(t: any, e: any): void;

    function get(t: any, e: any, a: any, i: any): any;

    function list(): any;

    function set(t: any, e: any): void;

}

export namespace TransformationFunctions {
    function add(t: any, e: any): void;

    function get(t: any): any;

    function list(): any;

    function set(t: any, e: any): void;

}

