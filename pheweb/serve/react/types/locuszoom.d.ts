/** Declaration file generated by dts-gen */
declare module 'locuszoom' {

    export interface Margin {
		top: number;
		right: number;
		bottom: number;
		left: number;
    };
    
    export interface Origin {
		x: number;
		y: number;
    };
    
    export class Dashboard {
	constructor(t: any);

	destroy(force: boolean): Dashboard;

	hide(): Dashboard;

	initialize(): Dashboard;

	position(): Dashboard;

	shouldPersist(): boolean;

	show(): Dashboard;

	update(): void;

    }

    export class DataLayer {
		render () : void;
		data : object[];
		constructor(layout: object, parent: Panel);

		addField(fieldName: string, nameSpace: string, transformations: string|string[]): string;

		applyAllElementStatus(): void;

		applyBehaviors(selection: any): void;

		applyCustomDataMethods(): DataLayer;

	applyDataMethods(): DataLayer;

	createTooltip(data: string|object): DataLayer;

	destroyAllTooltips(): DataLayer;

	destroyTooltip(element_or_id: string|object, temporary: boolean): DataLayer;

	draw(): DataLayer;

	executeBehaviors(directive: string, behaviors: { action : string , status : string }): DataLayer;

	exportData(format?: 'csv' | 'tsv' | 'json'): string;

	fadeAllElements(): DataLayer;

	fadeElement(id: string, exclusive?: boolean): DataLayer;

	fadeElementsByFilters(t: any, exclusive?: boolean): DataLayer;

	filter(filters: any[], return_type: string): any[];

	filterElements(t: any): any[];

	filterIndexes(t: any): any[];

	getAbsoluteDataHeight(): number;

	getAxisExtent(dimension: string): number[];

	getBaseId(): string;

	getElementAnnotation(t: any, e: any): any;

	getElementById(id: string): object|null;

	getElementId(element: string|object): string;

	getElementStatusNodeId(element : string| object): string| null;

	getPageOrigin(): {x: number, y: number};

	getTicks(dimension: string, config: object): object[];

	hideAllElements(): DataLayer;

	hideElement(id: string, exclusive?: boolean): DataLayer;

	hideElementsByFilters(filters: string[][], exclusive?: boolean): DataLayer;

	highlightAllElements(): DataLayer;

	highlightElement(id: string, exclusive?: boolean): DataLayer;

	highlightElementsByFilters(filters: string[][], exclusive?: boolean): DataLayer;

	initialize(): DataLayer;

	moveDown(): DataLayer;

	moveUp(): DataLayer;

	positionAllTooltips(): DataLayer;

	positionTooltip(id: string): DataLayer;

	reMap(): Promise<void>;

	resolveScalableParameter<X,Y>(layout: Array<any>|number|string|object,
				      element_data: X,
				      data_index: number): Y;

	selectAllElements(): DataLayer;

	selectElement(id: string, exclusive?: boolean): DataLayer;

	selectElementsByFilters(filters: string[][], exclusive?: boolean): DataLayer;

	setAllElementStatus(status: string, toogle: boolean): DataLayer;

	setElementAnnotation<T>(element: string|object, key: string, value : T): DataLayer;

	setElementStatus(status: string, element: string | object, active: boolean, exclusive: boolean): DataLayer;

	setElementStatusByFilters(status: string, toogle: boolean, filters: any[], exclusive: boolean): DataLayer;

	showOrHideTooltip(element: string | object, first_time: boolean): DataLayer;

	unfadeAllElements(): DataLayer;

	unfadeElement(id: string, exclusive?: boolean): DataLayer;

	unfadeElementsByFilters(filters: string[][], exclusive?: boolean): DataLayer;

	unhideAllElements(): DataLayer;

	unhideElement(id: string, exclusive?: boolean): DataLayer;

	unhideElementsByFilters(filters : string[][], exclusive?: boolean): DataLayer;

	unhighlightAllElements(): DataLayer;

	unhighlightElement(id: string, exclusive?: boolean): DataLayer;

	unhighlightElementsByFilters(filters: string[][], exclusive?: boolean): DataLayer;

	unselectAllElements(): DataLayer;

	unselectElement(id: string, exclusive?: boolean): DataLayer;

	unselectElementsByFilters(t: any, exclusive?: boolean): DataLayer;

	updateTooltip(d: string|object, id: string): DataLayer;

	static DefaultLayout: {
            fields?: (string)[] | null;
            tooltip_positioning: string;
            type: string;
            x_axis?: LayoutAxis | null;
	    y_axis?: LayoutAxis | null;
	};

	static Statuses: {
            adjectives: string[];
            menu_antiverbs: string[];
            verbs: string[];
	};

    }


    export class DataSources {
	constructor();

	add(ns: string, x: Data.Source|Array<any>|null): DataSources;

	addSource(ns: string, x: string): DataSources;

	fromJSON(ns: string): DataSources;

	get(ns: string): Data.Source;

	getSource(ns: string): Data.Source;

	keys(): string[];

	remove(ns: string): DataSources;

	removeSource(ns: string): DataSources;

	set(ns: string, x: Data.Source): DataSources;

	toJSON(): string;

	sources: { [key: string]: Data.Source; }
    }

	
    export class Legend {
	constructor(parent : Panel);

	hide(): void;

	position(): void;

	render(): void;

	show(): void;
	
    };

    export class Panel {
		data_layers : { [key: string]: DataLayer };
		
		constructor(layout : Layout, parent : Plot|null);

		addBasicLoader(addBasicLoader : boolean): Panel;

		addDataLayer(layout: Layout): any;

		clearSelections(): Panel;

		fadeAllElements(): any;

		fadeElementsByFilters(t: any, e: any): any;

		generateExtents(): Panel;

		generateTicks(axis: 'x'|'y1'|'y2'): number[]|object[];

		getLinkedPanelIds(e: any): any;

	hideAllElements(): any;

	hideElementsByFilters(t: any, e: any): any;

	highlightAllElements(): any;

	highlightElementsByFilters(t: any, e: any): any;

	initialize(): any;

	initializeLayout(): any;

	moveDown(): any;

	moveUp(): any;

	reMap(): any;

	removeDataLayer(t: any): any;

	render(): any;

	renderAxis(i: any): any;

	resortDataLayers(): void;

	scaleHeightToData(a: any): void;

	selectAllElements(): any;

	selectElementsByFilters(t: any, e: any): any;

	setAllElementStatus(e: any, a: any): void;

	setDimensions(t: any, e: any): any;

	setElementStatusByFilters(e: any, a: any, i: any, s: any): void;

	setMargin(t: any, e: any, a: any, i: any): any;

	setOrigin(t: any, e: any): any;

	setTitle(t: any): any;

	unfadeAllElements(): any;

	unfadeElementsByFilters(t: any, e: any): any;

	unhideAllElements(): any;

	unhideElementsByFilters(t: any, e: any): any;

	unhighlightAllElements(): any;

	unhighlightElementsByFilters(t: any, e: any): any;

	unselectAllElements(): any;

	unselectElementsByFilters(t: any, e: any): any;

	static DefaultLayout: Layout;

    }

    export class Plot {
		panels : { [key: string]: Panel };
		constructor(id: string, datasource: DataSources, layout: Layout);
		addPanel(layout: Layout): Panel;
		applyState<T>(state_changes: any): Promise<T>;
		clearPanelData(panelId : string, mode : string): Plot;
		initialize(): Plot;
		initializeLayout(): Plot;
		positionPanels(): Plot;
		refresh<T>(): Promise<T>;
		removePanel(id: string): Plot;
		rescaleSVG(): Plot;
		setDimensions(width : number, height : number): Plot;
		startDrag(panel: Panel, method: string): Plot
		stopDrag(): Plot;
        subscribeToData(fields : string[], success_callback : (param : any) => void, opts : boolean): any;
        sumProportional(dimension: string): number;
        static DefaultLayout: Layout;

    }

    export const StandardLayout: {
		dashboard: {
			components: {
				position: string;
				subtitle: string;
				title: string;
				type: string;
				}[];
		};
	height: number;
	aspect_ratio: number;
	max_region_scale: number;
	min_region_scale: number;
	panels: {
            axes: { x: LayoutAxesLabel;
		    y1: LayoutAxesLabel;
		    y2: LayoutAxesLabel; };
            dashboard: {
		components: {
                    color: string;
                    group_position: string;
                    position: string;
                    type: string;
		}[];
            };
            data_layers: {
		id: string;
		offset: number;
		orientation: string;
		type: string;
            }[];
            height: number;
            id: string;
            inner_border: string;
            interaction: {
		drag_background_to_pan: boolean;
		drag_x_ticks_to_scale: boolean;
		drag_y1_ticks_to_scale: boolean;
		drag_y2_ticks_to_scale: boolean;
		scroll_to_zoom: boolean;
		x_linked: boolean;
            };
            legend: {
		hidden: boolean;
		orientation: string;
		origin: Origin;
            };
            margin: Margin;
            min_height: number;
            min_width: number;
            proportional_height: number;
            proportional_width: number;
            width: number;
	}[];
	responsive_resize: string;
	state: {
	};
	width: number;
    };

    export const ext: {
    };

    export const version: string;

    export function createCORSPromise<X>(method: string, url: string, body?: string, headers? : object, timeout? : number): Promise<X>;

    export function generateCurtain(): object;

    export function generateLoader(): object;

    export function getToolTipData<E>(node: Element): E;

    export function getToolTipDataLayer(node: Element): DataLayer;

    export function getToolTipPanel(node: Element): Panel;

    export function getToolTipPlot(node: Element): Plot;

    export function parseFields(data : object, html: string): string;

    export function parsePositionQuery(query: string): {chr:string, start: number, end:number} | {chr:string, position:number};

    export function populate(selector: string, datasources: DataSources, parameter: object): Plot;

    export function populateAll(selector: string, datasources: DataSources, layout: object): Plot[];

    export function positionIntToString(position: number, exponent: number, suffix: boolean): string;

    export function positionStringToInt(s: string): number;

    export function prettyTicks(range: number[], clip_range: string, target_tick_count : number): number[];

    export function subclass(t: any, e: any, ...args: any[]): any;

    export namespace Dashboard {
	class Component {
            constructor(t: any, e: any);

            destroy(t: any): any;

            hide(): any;

            position(): any;

            shouldPersist(): any;

            show(): any;

            update(): void;

            static Button(t: any): void;

	}

	namespace Components {
            function add(t: any, e: any): void;

            function get(t: any, e: any, a: any): any;

            function list(): any;

            function set(t: any, e: any): void;

	}

    }

    export namespace Data {
	class AssociationSource {
            constructor(t: any);

            getURL(t: any, e: any, a: any): any;

            normalizeResponse(t: any): any;

            preGetData(t: any, e: any, a: any, i: any): any;

            static SOURCE_NAME: string;

	}

	class ConnectorSource {
            constructor(t: any);

            combineChainBody(t: any, e: any): void;

            getRequest(t: any, a: any, e: any): any;

            parseInit(t: any): void;

            parseResponse(t: any, e: any, a: any, i: any, s: any): any;

            static SOURCE_NAME: string;

	}

	class GeneConstraintSource {
            constructor(t: any);

            combineChainBody(e: any, t: any, a: any, i: any, s: any): any;

            fetchRequest(t: any, e: any, a: any): any;

            getCacheKey(t: any, e: any, a: any): any;

            getURL(): any;

            normalizeResponse(t: any): any;

            static SOURCE_NAME: string;

	}

	class GeneSource {
            constructor(t: any);

            extractFields(t: any, e: any, a: any, i: any): any;

            getURL(t: any, e: any, a: any): any;

            normalizeResponse(t: any): any;

            static SOURCE_NAME: string;

	}

	class GwasCatalog {
            constructor(t: any);

            combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

            extractFields(t: any, e: any, a: any, i: any): any;

            findMergeFields(t: any): any;

            getURL(t: any, e: any, a: any): any;

            static SOURCE_NAME: string;

	}

	class LDSource {
            constructor(t: any);

            combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

            findMergeFields(t: any, ...args: any[]): any;

            findRequestedFields(t: any, e: any): any;

            getRefvar(t: any, e: any, a: any): any;

            getURL(t: any, e: any, a: any): any;

            normalizeResponse(t: any): any;

            preGetData(t: any, e: any): void;

            static SOURCE_NAME: string;

	}

	class LDSource2 {
            constructor(...args: any[]);

            fetchRequest(t: any, e: any, a: any): any;

            getURL(t: any, e: any, a: any): any;

            static SOURCE_NAME: string;

	}

	class PheWASSource {
            constructor(t: any);

            getURL(t: any, e: any, a: any): any;

            static SOURCE_NAME: string;

	}

	class RecombinationRateSource {
            constructor(t: any);

            getURL(t: any, e: any, a: any): any;

            static SOURCE_NAME: string;

	}

	class Parameter {

	}
	class Source {
            constructor();
			params : ({ [key: string ]: string; } | { [key: string ]: any; } | Parameter)

            annotateData(records : Object[], chain : Object) : Object[]|Promise<Object>;

            combineChainBody(t: any, e: any, a: any, i: any, s: any): any;

            extractFields(data : Object[], fields : string[], outnames : string[], trans: ((v : any)=>any)[]) : object[];

            fetchRequest (state: Object, chain: any, fields: any): Promise<any>;

			getCacheKey: (state: Object, chain: any, fields: any) => string | undefined;

			getData: (state : Object, fields : string[], outnames : string[], trans: ((v : any)=>any)[] ) => any;

			getRequest: (state: Object, chain: any, fields: any) => string | undefined;

			getURL: (state: Object, chain: any, fields: any) => string | undefined;

            normalizeResponse(data : Object[]|Object) : any;

            parseArraysToObjects(t: any, e: any, a: any, i: any): any;

            parseData(t: any, e: any, a: any, i: any): any;

            parseInit(init : string | { url : string , params : string}) : void;

            parseObjectsToObjects(t: any, e: any, a: any, i: any): any;

            parseResponse(resp : string | object, chain: Object, fields : string[], outnames : string[], trans: ((v : any)=>any)[] ) : Promise<{header: any, discrete: any, body: object[]}>;

            prepareData(t: any): any;

            toJSON(): JSON;

            static extend(constructorFun: (init : any) => void, uniqueName: string, base?: (string| any )): any;
	
	}

	class StaticSource {
            constructor(t: any);

            getRequest(t: any, e: any, a: any): any;

            toJSON(): any;

            static SOURCE_NAME: string;

	}

	function Field(t: any): any;

	function Requester(l: any): any;

    }

    export namespace DataLayers {
	function add(t: any, e: any): void;

	function extend(t: any, e: any, a: any): any;

	function get(t: any, e: any, a: any): any;

	function list(): any;

	function set(t: any, e: any): void;

    }

    export namespace KnownDataSources {
	function add(t: any): void;

	function clear(): void;

	function create(t: any, ...args: any[]): any;

	function extend(t: any, e: any, a: any): any;

	function get(t: any): any;

	function getAll(): any;

	function list(): any;

	function push(t: any): void;

	function setAll(t: any): void;

    }

    export namespace Layouts {
	function add(t: any, e: any, a: any): any;

	function get(t: any, e: any, a: any): any;

	function list(t: any): any;

	function merge(t: any, e: any): any;

	function set(t: any, e: any, a: any): any;

    }

    export namespace ScaleFunctions {
	function add(t: any, e: any): void;

	function get(t: any, e: any, a: any, i: any): any;

	function list(): any;

	function set(t: any, e: any): void;

    }

    export namespace TransformationFunctions {
	function add(t: any, e: any): void;

	function get(t: any): any;

	function list(): any;

	function set(t: string, e: (x : number) => number | string): void;

    }

    export interface Layout {
		height?: number;
		width?: number;
		responsive_resize?: string;
		id?: string;
		title?: LayoutTitle;
		proportional_height?: number;
		min_width: number;
		min_height: number;
		y_index?: number;
		margin?: Margin;
		inner_border?: string;
		dashboard: LayoutDashboard;
		axes? : LayoutAxes;
		legend?: LayoutLegend;
		interaction?: LayoutInteraction;
		data_layers?: (LayoutDataLayersEntity)[] | null;
		description?: string | null;
	    origin?: Origin;
	    proportional_origin?: Origin;
		background_click?: string;
		resizable?: string;
		min_region_scale?: number;
		max_region_scale?: number;
		panel_boundaries?: boolean;
		mouse_guide?: boolean;
		cliparea?: { height: number;
		    		origin: Origin;
		    		width: number; };
		panels?: LayoutPanel[];
	}

	export interface LayoutPanel {

	}

    export interface LayoutTitle {
		text: string;
		x: number;
		y: number;
	}

    export interface LayoutDashboard {
		components?: (LayoutComponentsEntity)[] | null;
	}

    export interface LayoutComponentsEntity {
		type: string;
		position?: string;
		color?: string;
		title?: string;
		text?: string;
		url?: string;
		direction?: number;
		group_position?: string;
		button_html?: string;
		step?: number;
	}

    export interface LayoutAxes {
		x: LayoutAxesLabel;
		y1: LayoutAxesLabel;
	}

    export interface LayoutAxesLabel {
		extent?: string;
		label?: string;
		label_function?: null | string;
		label_offset?: number;
		render?: boolean;
		tick_format?: string;
    }

    export interface LayoutLegend {
		orientation: string;
	        origin: Origin;
		hidden: boolean;
		width: number;
		height: number;
		padding: number;
		label_size: number;
	}

    export interface LayoutInteraction {
		drag_background_to_pan: boolean;
		drag_x_ticks_to_scale: boolean;
		drag_y1_ticks_to_scale: boolean;
		drag_y2_ticks_to_scale: boolean;
		scroll_to_zoom: boolean;
		x_linked: boolean;
		y1_linked: boolean;
		y2_linked: boolean;
	}

    export interface LayoutDataLayersEntity {
		behaviors?: LayoutBehaviors | null;
		color?: ( | string)[] | null;
		fields?: (string)[] | null;
		fill_opacity?: number | null;
		id: string;
		id_field?: string | null;
		legend?: (LayoutLegendEntity)[] | null;
		namespace?: {[key: string]: string } | null;
		offset?: number | null;
		orientation?: string | null;
		point_shape?: LayoutPointShape | null;
		point_size?: LayoutPointSize | null;
		tooltip?: LayoutTooltip | null;
		transition?: boolean | null;
		type: string;
		x_axis?: LayoutAxis | null;
		y_axis?: LayoutAxis | null;
	}

    export interface LayoutNamespace {
		conditional?: string;
		association?: string;
		ld?: string;
	}

    export interface LayoutPointShape {
		scale_function: string;
		field: string;
		parameters: LayoutParameters;
	}

    export interface LayoutParameters {
		categories?: (string)[] | null;
		values?: (string)[] | null;
		null_value: string;
	}

    export interface LayoutPointSize {
		scale_function: string;
		field: string;
		parameters: LayoutPointSizeParameters;
	}

    export interface LayoutPointSizeParameters {
		categories?: (string)[] | null;
		values?: (number)[] | null;
		null_value: number;
	}

    export interface LayoutLegendEntity {
		shape: string;
		color: string;
		size: number;
		label: string;
		class: string;
	}

    export interface LayoutBehaviors {
		onmouseover?: (LayoutOnmouseoverEntityOrOnmouseoutEntity)[] | null;
		onmouseout?: (LayoutOnmouseoverEntityOrOnmouseoutEntity)[] | null;
		onclick?: (LayoutOnclickEntity)[] | null;
	}

    export interface LayoutOnmouseoverEntityOrOnmouseoutEntity {
		action: string;
		status: string;
	}

    export interface LayoutOnclickEntity {
		action: string;
		href?: string;
		status: string;
		exclusive: boolean;
	}

    export interface LayoutTooltip {
		closable: boolean;
		show: LayoutShow;
		hide: LayoutHide;
		html: string;
	}

    export interface LayoutShow { or?: (string)[] | null; }

    export interface LayoutHide { and?: (string)[] | null; }

    export interface LayoutAxis {
		field: string;
		axis: number;
	        floor?: number;
	        lower_buffer?: number;
	        upper_buffer?: number;
		min_extent?: (number)[] | null;
    }

}
